plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.xdomain.user'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

 jar {
        manifest {
            attributes 'Main-Class': 'com.xdomain.user'
        }
    }
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	 testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
	//testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M3")
	// https://mvnrepository.com/artifact/javax.validation/validation-api
	compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
	// https://mvnrepository.com/artifact/org.modelmapper/modelmapper
	compile group: 'org.modelmapper', name: 'modelmapper', version: '0.7.5'
	// https://mvnrepository.com/artifact/org.springframework/spring-aop
	compile group: 'org.springframework', name: 'spring-aop'
	compile "org.springframework.boot:spring-boot-starter-security"
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
	
}


test {
	useJUnitPlatform()
}

test.finalizedBy jacocoTestReport

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
        limit {
          counter = 'LINE'
          value = 'COVEREDRATIO'
          minimum = 0
      }
      excludes = [
        'com.xdomain.user.entities.*',
        'com.xdomain.user.config.*',
        'com.xdomain.user.security.filter.*',
        'com.xdomain.user.exception.*',
        'com.xdomain.user.model.*'
      ]
    }
  }
}

jacocoTestReport {
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        'com/xdomain/user/entities/**',
        'com/xdomain/user/security/entities/**',
        'com/xdomain/user/config/**',
        'com/xdomain/user/security/filter/**',
        'com/xdomain/user/exception/**',
        'com/xdomain/user/controller/**',
        'com/xdomain/user/model/**'
      ])
    })
  }
}


